{
    "info": {
        "description": "The RenderNet API section provides a comprehensive set of APIs that allow you to create high-quality media content using textual and graphical inputs. By utilizing the features provided in this section, users can easily generate engaging visuals and media assets.You need an API key to use these APIs. To get your personal key, log in to Rendernet, head to the account page at [RenderNet](https://rendernet.ai/account) and hit generate API key. Add this key as an X-API-Key header in the requests that you send.",
        "title": "RenderNet API",
        "version": "1.0"
    },
    "openapi": "3.0.2",
    "components": {
        "schemas": {
            "ArchiveAssetsRequest": {
                "properties": {
                    "ids": {
                        "items": {
                            "$ref": "#/components/schemas/AssetId"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "ArchiveAssetsSuccessResponse": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/ArchivedAssetItem"
                        },
                        "type": "array"
                    },
                    "err": {
                        "$ref": "#/components/schemas/Error",
                        "description": "The error if the request was not successful",
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "ArchiveGeneration": {
                "properties": {
                    "id": {
                        "description": "The id of the archived image or generation",
                        "example": "img_01",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ArchiveGenerationSuccessResponse": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/ArchiveGeneration",
                        "type": "object"
                    },
                    "err": {
                        "description": "The error if the request was not successful",
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "ArchivedAssetItem": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/AssetDetails",
                        "description": "The details of the asset",
                        "type": "object"
                    },
                    "id": {
                        "description": "The id of the asset",
                        "example": "asset_id",
                        "type": "string"
                    },
                    "status": {
                        "description": "The status of the asset",
                        "example": "archive",
                        "type": "string"
                    },
                    "tags": {
                        "description": "The tag of the asset",
                        "example": "api",
                        "type": "string"
                    },
                    "type": {
                        "description": "The type of the asset",
                        "example": "image",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Asset": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/AssetData"
                    },
                    "id": {
                        "description": "The unique identifier of the asset",
                        "example": "ast_xxxxxxxx",
                        "type": "string"
                    },
                    "status": {
                        "description": "The current status of the asset (e.g., pending, active)",
                        "enum": [
                            "pending",
                            "active",
                            "failed"
                        ],
                        "example": "pending",
                        "type": "string"
                    },
                    "tags": {
                        "description": "A list of tags associated with the asset",
                        "example": [
                            "api"
                        ],
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "type": {
                        "description": "The type of the asset",
                        "example": "image",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "AssetData": {
                "properties": {
                    "size": {
                        "$ref": "#/components/schemas/Size"
                    },
                    "url": {
                        "description": "The URL of the uploaded asset",
                        "example": "https://s3-asset-url",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "AssetDetails": {
                "properties": {
                    "size": {
                        "$ref": "#/components/schemas/ImageSize",
                        "description": "The size of the asset",
                        "type": "object"
                    },
                    "url": {
                        "description": "The url of the asset",
                        "example": "object-url",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "AssetId": {
                "example": "ast_01",
                "type": "string"
            },
            "AssetItem": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/AssetDetails",
                        "description": "The details of the asset",
                        "type": "object"
                    },
                    "id": {
                        "description": "The id of the asset",
                        "example": "asset_id",
                        "type": "string"
                    },
                    "status": {
                        "description": "The status of the asset",
                        "enum": [
                            "active",
                            "archive",
                            "pending"
                        ],
                        "example": "active",
                        "type": "string"
                    },
                    "tags": {
                        "description": "The tag of the asset",
                        "example": "api",
                        "type": "string"
                    },
                    "type": {
                        "description": "The type of the asset",
                        "example": "image",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "BadRequestResponse": {
                "properties": {
                    "data": {
                        "type": "object"
                    },
                    "err": {
                        "$ref": "#/components/schemas/Error",
                        "description": "The error if the request was not successful",
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "ControlNet": {
                "type": "object",
                "properties": {
                    "asset_id": {
                        "description": "The asset id of the input image to be control net",
                        "example": "ast_01",
                        "type": "string"
                    },
                    "control_mode": {
                        "description": "The priority of the control net: `0` - The priority between control net and prompt is balanced. `1` - The prompt priority is higher than the control net. `2` - The control net priority is higher than the prompt.\n",
                        "enum": [
                            0,
                            1,
                            2
                        ],
                        "example": 0,
                        "type": "integer"
                    },
                    "name": {
                        "description": "The name of the control net",
                        "example": "Normal",
                        "type": "string"
                    },
                    "resize_mode": {
                        "description": "The relation between the control net image and generated image: `0` - Resize and Fill. `1` - Crop and Resize. `2` - Just Resize.\n",
                        "enum": [
                            0,
                            1,
                            2
                        ],
                        "example": 0,
                        "type": "integer"
                    }
                },
                "required": ["asset_id", "control_mode", "name", "resize_mode"]
            },
            "Credits": {
                "properties": {
                    "estimated": {
                        "description": "The estimated number of credits for the generation",
                        "example": 5,
                        "type": "integer"
                    },
                    "remaining": {
                        "description": "The remaining number of credits",
                        "example": 20,
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "Error": {
                "properties": {
                    "code": {
                        "description": "The error specific code",
                        "example": "error_code",
                        "type": "string"
                    },
                    "message": {
                        "description": "The error message",
                        "example": "error_message",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "EstimationResponse": {
                "properties": {
                    "credits": {
                        "$ref": "#/components/schemas/Credits",
                        "description": "The credit details of the generation",
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "EstimationSuccessResponse": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/EstimationResponse",
                        "type": "object"
                    },
                    "error": {
                        "description": "The error if the request was not successful",
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "Facelock": {
                "type": "object",
                "properties": {
                    "asset_id": {
                        "description": "The asset id of the input image you want to use for facelock",
                        "example": "ast_01",
                        "type": "string"
                    }
                },
                "required": ["asset_id"]
            },
            "FeedItem": {
                "properties": {
                    "created_at": {
                        "description": "The date and time when the feed item was created",
                        "example": 1675732000,
                        "format": "timestamp",
                        "type": "integer"
                    },
                    "generation_id": {
                        "description": "The id of the generation",
                        "example": "gen_01",
                        "type": "string"
                    },
                    "images": {
                        "items": {
                            "$ref": "#/components/schemas/Image"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "FeedSuccessResponse": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/FeedItem"
                        },
                        "type": "array"
                    },
                    "err": {
                        "description": "The error if the request was not successful",
                        "type": "object"
                    },
                    "pagination": {
                        "$ref": "#/components/schemas/Pagination",
                        "description": "The pagination information",
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "GenerationRequest": {
                "properties": {
                    "aspect_ratio": {
                        "description": "The aspect ratio of the image for the generation",
                        "enum": [
                            "1:1",
                            "2:3",
                            "3:2",
                            "16:9",
                            "9:16"
                        ],
                        "example": "1:1",
                        "type": "string"
                    },
                    "batch_size": {
                        "description": "The batch size of the generation (Depends on the subscription plan)",
                        "example": 1,
                        "type": "integer"
                    },
                    "cfg_scale": {
                        "description": "The configuration scale for the generation",
                        "example": 7,
                        "maximum": 12,
                        "minimum": 4,
                        "type": "number"
                    },
                    "control_net": {
                        "$ref": "#/components/schemas/ControlNet",
                        "description": "The control net(pose control) for the generation if you want to use (optional)"
                    },
                    "facelock": {
                        "$ref": "#/components/schemas/Facelock",
                        "description": "The face you want to restore for the generation if you want to use (optional)"
                    },
                    "loras": {
                        "description": "The list of loras along with its strength for the generation (optional)",
                        "items": {
                            "$ref": "#/components/schemas/Lora"
                        },
                        "type": "array"
                    },
                    "model": {
                        "description": "The model you want to use for the generation",
                        "example": "Replicant",
                        "type": "string"
                    },
                    "prompt": {
                        "$ref": "#/components/schemas/Prompt",
                        "description": "The prompt for the generation"
                    },
                    "quality": {
                        "description": "The quality of the image for the generation",
                        "enum": [
                            "Plus",
                            "Regular"
                        ],
                        "example": "Plus",
                        "type": "string"
                    },
                    "sampler": {
                        "description": "The sampler you want to use for the generation",
                        "enum": [
                            "DPM++ 2M Karras",
                            "DPM++ 2M SDE Karras",
                            "DPM++ 2S a Karras",
                            "DPM++ SDE",
                            "DPM++ SDE Karras",
                            "Euler a"
                        ],
                        "example": "DPM++ 2M Karras",
                        "type": "string"
                    },
                    "seed": {
                        "description": "The seed for the generation(Randomized if you don't want to use a seed)",
                        "example": 1234,
                        "type": "integer"
                    },
                    "segment": {
                        "$ref": "#/components/schemas/Segment",
                        "description": "The segment for generation (optional use in case if you are using a generation where you want to replace a part of the image)"
                    },
                    "steps": {
                        "description": "The number of steps you want AI to take for the generation",
                        "example": 20,
                        "maximum": 30,
                        "minimum": 10,
                        "type": "integer"
                    },
                    "style": {
                        "description": "The style you want to use for the generation",
                        "example": "Watercolor",
                        "type": "string"
                    },
                    "true_touch": {
                        "$ref": "#/components/schemas/TrueTouch",
                        "description": "The true touch for generation(optional in case if you are using a generation where you want to enhance the resolution of the image)"
                    }
                },
                "type": "object"
            },
            "GenerationResponse": {
                "properties": {
                    "credits_remaining": {
                        "description": "The number of credits remaining",
                        "example": 20,
                        "type": "integer"
                    },
                    "generation_id": {
                        "description": "The id of the generation",
                        "example": "gen_01",
                        "type": "string"
                    },
                    "images": {
                        "items": {
                            "$ref": "#/components/schemas/ImageMetadata"
                        },
                        "type": "array"
                    },
                    "result": {
                        "description": "The result status of the generation",
                        "example": "initiated",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "GenerationStatus": {
                "properties": {
                    "image_id": {
                        "description": "The id of the image",
                        "example": "img_01",
                        "type": "string"
                    },
                    "status": {
                        "description": "The status of the image",
                        "enum": [
                            "success",
                            "failed",
                            "pending",
                            "archive"
                        ],
                        "example": "success",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "GenerationStatusSuccessResponse": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/GenerationStatus",
                        "type": "array"
                    },
                    "err": {
                        "description": "The error if the request was not successful",
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "GenerationSuccessResponse": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/GenerationResponse",
                        "type": "object"
                    },
                    "err": {
                        "description": "The error if the request was not successful",
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "GetAssetSuccessResponse": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/AssetItem",
                        "type": "object"
                    },
                    "err": {
                        "description": "The error if the request was not successful",
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "Image": {
                "properties": {
                    "id": {
                        "description": "The id of the image",
                        "example": "img_01",
                        "type": "string"
                    },
                    "size": {
                        "$ref": "#/components/schemas/ImageSize"
                    },
                    "status": {
                        "description": "The status of the image",
                        "enum": [
                            "pending",
                            "success",
                            "failed"
                        ],
                        "example": "success",
                        "type": "string"
                    },
                    "url": {
                        "description": "The url of the image",
                        "example": "object-url",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ImageMetadata": {
                "properties": {
                    "id": {
                        "description": "The id of the image",
                        "example": "img_01",
                        "type": "string"
                    },
                    "image_size": {
                        "$ref": "#/components/schemas/ImageSize"
                    },
                    "model": {
                        "description": "The model used for the image if model is used in the generation else it won't be present",
                        "example": "Replicant",
                        "type": "string"
                    },
                    "status": {
                        "description": "The status of the image",
                        "example": "initiated",
                        "type": "string"
                    },
                    "style": {
                        "description": "The style used for the image if style is used in the generation else it won't be present",
                        "example": "Watercolor",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ImageSize": {
                "properties": {
                    "height": {
                        "description": "The height of the generated image",
                        "example": 512,
                        "type": "integer"
                    },
                    "width": {
                        "description": "The width of the generated image",
                        "example": 512,
                        "type": "integer"
                    }
                },
                "required": [
                    "height",
                    "width"
                ],
                "type": "object"
            },
            "ListAssetsSuccessResponse": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/AssetItem"
                        },
                        "type": "array"
                    },
                    "err": {
                        "description": "The error if the request was not successful",
                        "type": "object"
                    },
                    "pagination": {
                        "$ref": "#/components/schemas/Pagination",
                        "description": "The pagination information",
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "ListResource": {
                "properties": {
                    "base_model": {
                        "description": "The base model of the resource",
                        "example": "SDXL",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the resource",
                        "example": "JuggernautXL",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ListResourceSuccessResponse": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/ListResource"
                        },
                        "type": "array"
                    },
                    "err": {
                        "description": "The error if the request was not successful",
                        "type": "object"
                    },
                    "pagination": {
                        "$ref": "#/components/schemas/Pagination",
                        "description": "The pagination data of the request",
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "Lora": {
                "type": "object",
                "properties": {
                    "name": {
                        "description": "The name of the lora",
                        "example": "lora_name",
                        "type": "string"
                    },
                    "weight": {
                        "description": "The effect of the lora",
                        "example": 0.5,
                        "maximum": 1,
                        "minimum": 0.1,
                        "type": "number"
                    }
                },
                "required": ["name", "weight"]
            },
            "NotFoundResponse": {
                "properties": {
                    "data": {
                        "type": "object"
                    },
                    "err": {
                        "$ref": "#/components/schemas/Error",
                        "description": "The error if the request was not successful",
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "Pagination": {
                "properties": {
                    "page": {
                        "description": "The page number",
                        "example": 1,
                        "type": "integer"
                    },
                    "page_size": {
                        "description": "The page size",
                        "example": 10,
                        "maximum": 50,
                        "minimum": 1,
                        "type": "integer"
                    },
                    "total": {
                        "description": "The total number of items",
                        "example": 100,
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "Prompt": {
                "type": "object",
                "properties": {
                    "negative": {
                        "description": "The negative prompt",
                        "example": "nsfw, deformed, extra limbs, bad anatomy, deformed pupils, text, worst quality, jpeg artifacts, ugly, duplicate, morbid, mutilated",
                        "type": "string"
                    },
                    "positive": {
                        "description": "The positive prompt",
                        "example": "a man looking into the camera",
                        "type": "string"
                    }
                },
                "required": ["negative", "positive"]
            },
            "Segment": {
                "type": "object",
                "properties": {
                    "asset_id": {
                        "description": "The asset id of the input image to be segmented",
                        "example": "ast_01",
                        "type": "string"
                    },
                    "find": {
                        "description": "The part of the image you would like to replace",
                        "example": "red shirt",
                        "type": "string"
                    },
                    "replace": {
                        "description": "Specify what would you like to replace the specified part of the image with",
                        "example": "blue shirt",
                        "type": "string"
                    }
                },
                "required": ["asset_id", "find", "replace"]
            },
            "Size": {
                "type": "object",
                "properties": {
                    "height": {
                        "description": "The height of the input image to be uploaded",
                        "example": 512,
                        "type": "integer"
                    },
                    "width": {
                        "description": "The width of the input image to be uploaded",
                        "example": 512,
                        "type": "integer"
                    }
                },
                "required": [
                    "height",
                    "width"
                ]
            },
            "TrueTouch": {
                "type": "object",
                "properties": {
                    "asset_id": {
                        "description": "The asset id of the input image to be used for true-touch",
                        "example": "ast_01",
                        "type": "string"
                    },
                    "enhance_strength": {
                        "description": "The strength of the true-touch effect",
                        "example": 0.5,
                        "type": "number"
                    },
                    "scale_factor": {
                        "description": "The scale factor of the true-touch effect",
                        "enum": [
                            "1",
                            "1.5",
                            "2",
                            "2.5",
                            "3"
                        ],
                        "example": 1.5,
                        "type": "number"
                    }
                },
                "required": ["asset_id", "enhance_strength", "scale_factor"]
            },
            "UnauthorizedError": {
                "properties": {
                    "code": {
                        "description": "The error specific code",
                        "example": "REQ01",
                        "type": "string"
                    },
                    "message": {
                        "description": "The error message",
                        "example": "Invalid credentials",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "UnauthorizedResponse": {
                "properties": {
                    "data": {
                        "type": "object"
                    },
                    "err": {
                        "$ref": "#/components/schemas/UnauthorizedError",
                        "description": "The error if the request was not successful",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "UploadRequest": {
                "properties": {
                    "size": {
                        "$ref": "#/components/schemas/Size",
                        "description": "The approximate size of the image to be uploaded",
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "UploadResponse": {
                "properties": {
                    "asset": {
                        "$ref": "#/components/schemas/Asset"
                    },
                    "upload_url": {
                        "description": "The pre-signed URL for uploading the asset",
                        "example": "https://s3-presigned-url",
                        "type": "string"
                    }
                },
                "required": [
                    "asset"
                ]
            },
            "UploadSuccessResponse": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/UploadResponse",
                        "type": "object"
                    },
                    "err": {
                        "description": "The error if the request was not successful",
                        "type": "object"
                    }
                },
                "type": "object"
            }
        },
        "securitySchemes": {
            "apiKeyAuth": {
                "in": "header",
                "name": "X-API-KEY",
                "type": "apiKey"
            }
        }
    },
    "paths": {
        "/api/v1/assets": {
            "get": {
                "description": "The list assets endpoint lets users retrieve detailed information about their uploaded images, including their dimensions, URL, status, tags, and type. Users can access pagination information to navigate through the results efficiently.\nThis section provides valuable data for managing assets within the application.<br> <br>\n",
                "parameters": [
                    {
                        "description": "The page number of the feed",
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "The page size of the feed",
                        "in": "query",
                        "name": "page_size",
                        "schema": {
                            "maximum": 50,
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListAssetsSuccessResponse"
                                }
                            }
                        },
                        "description": "A list of assets"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedResponse"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    }
                },
                "summary": "List Assets",
                "tags": [
                    "Assets"
                ]
            }
        },
        "/api/v1/assets/archive": {
            "post": {
                "description": "The delete assets endpoint allows users to delete their uploaded assets.\nUsers can send a list of asset ids to this endpoint to delete the associated images.<br> <br>\n",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ArchiveAssetsRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ArchiveAssetsSuccessResponse"
                                }
                            }
                        },
                        "description": "A list of deleted assets"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestResponse"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedResponse"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    }
                },
                "summary": "Delete Assets",
                "tags": [
                    "Assets"
                ]
            }
        },
        "/api/v1/assets/upload": {
            "post": {
                "description": "The upload asset section allows users to upload images to the platform.\nBy providing the height and width of the image, users can easily upload images and receive a unique identifier, URL, and status for each uploaded asset.\nThis section simplifies the process of adding new images to the platform and managing assets efficiently. <br> <br>\n",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UploadRequest",
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UploadSuccessResponse"
                                }
                            }
                        },
                        "description": "Successful response containing the upload url for the asset"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestResponse"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedResponse"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    }
                },
                "summary": "Upload Asset",
                "tags": [
                    "Assets"
                ]
            }
        },
        "/api/v1/assets/{asset_id}": {
            "get": {
                "description": "The get assets endpoint allows users to retrieve detailed information about a specific asset, including its size, type, status, tags, and URL.\nUsers can access this endpoint to obtain key details about a particular image they uploaded to the system. <br> <br>\n",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetAssetSuccessResponse"
                                }
                            }
                        },
                        "description": "The asset is successfully fetched"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedResponse"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        },
                        "description": "The asset is not found"
                    }
                },
                "summary": "Get Asset",
                "tags": [
                    "Assets"
                ]
            }
        },
        "/api/v1/generations": {
            "get": {
                "description": "The fetch feed endpoint lets users retrieve information about all their generated images and their associated generation details.\nUsers can access data such as image URLs and resolution, as well as pagination information for navigating through the results.\nThis section provides insights into the status and creation timestamps of feed images, enabling users to effectively filter by generation ID, image ID, or status. <br> <br>\n",
                "parameters": [
                    {
                        "description": "The status of the feed item. (optional)",
                        "example": "success",
                        "in": "query",
                        "name": "status",
                        "schema": {
                            "enum": [
                                "success",
                                "failed"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "The id of the image (optional)",
                        "in": "query",
                        "name": "image_id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The id of the generation (optional)",
                        "in": "query",
                        "name": "generation_id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The page number of the feed",
                        "example": 1,
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "description": "The page size of the feed",
                        "example": 10,
                        "in": "query",
                        "name": "page_size",
                        "schema": {
                            "maximum": 50,
                            "minimum": 1,
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FeedSuccessResponse"
                                }
                            }
                        },
                        "description": "A list of feed items"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestResponse"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedResponse"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    }
                },
                "summary": "Fetch feed",
                "tags": [
                    "Generation"
                ]
            },
            "post": {
                "description": "This section lets users generate images based on a variety of parameters such as aspect ratio, model selection, and image quality. \nUsers can control the generation process by specifying prompts, ControlNets, FaceLock images, and other optional features to achieve customized results tailored to their needs. \nThe response will return a unique generation ID for each request, which can be used to track the status and view generated images.<br> <br>\n",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "items": {
                                    "$ref": "#/components/schemas/GenerationRequest"
                                },
                                "type": "array"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GenerationSuccessResponse"
                                }
                            }
                        },
                        "description": "A list of submitted generation requests"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestResponse"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedResponse"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    }
                },
                "summary": "Generate images",
                "tags": [
                    "Generation"
                ]
            }
        },
        "/api/v1/generations/estimate": {
            "post": {
                "description": "This section lets users estimate the number of credits required for a particular generation. With this endpoint, users can send a payload containing their preferred parameters.\nIn return, they will receive the credit cost for processing the generation request and the remaining credits after the process is completed. <br> <br>\n",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "items": {
                                    "$ref": "#/components/schemas/GenerationRequest"
                                },
                                "type": "array"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EstimationSuccessResponse"
                                }
                            }
                        },
                        "description": "The estimated credits for the generation"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestResponse"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedResponse"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    }
                },
                "summary": "Generation Estimate",
                "tags": [
                    "Generation"
                ]
            }
        },
        "/api/v1/generations/{generation_id}": {
            "delete": {
                "description": "This section lets users delete a specific generation from the system by specifying the following \n- generation id: In this case, it will delete all the images associated with the generation id. <br>\n- generation id and image id: In this case, it will delete the image with the specified id. <br> <br>\n",
                "parameters": [
                    {
                        "description": "The id of the generation",
                        "in": "path",
                        "name": "generation_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ArchiveGenerationSuccessResponse"
                                }
                            }
                        },
                        "description": "Archived generation or image id"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestResponse"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedResponse"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        },
                        "description": "Not found"
                    }
                },
                "summary": "Delete Generation",
                "tags": [
                    "Generation"
                ]
            }
        },
        "/api/v1/generations/{generation_id}/images/{image_id}": {
            "delete": {
                "description": "This section lets users delete a specific generation from the system by specifying the following \n- generation id: In this case, it will delete all the images associated with the generation id. <br>\n- generation id and image id: In this case, it will delete the image with the specified id. <br> <br>\n",
                "parameters": [
                    {
                        "description": "The id of the generation",
                        "in": "path",
                        "name": "generation_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The id of the image",
                        "in": "path",
                        "name": "image_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ArchiveGenerationSuccessResponse"
                                }
                            }
                        },
                        "description": "Archived generation or image id"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestResponse"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedResponse"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        },
                        "description": "Not found"
                    }
                },
                "summary": "Delete Generation",
                "tags": [
                    "Generation"
                ]
            }
        },
        "/api/v1/generations/{generation_id}/images/{image_id}/status": {
            "get": {
                "description": "This section provides users with the ability to quickly check the status of a generation by specifying the following \n- generation id: In this case, it will return the status of all the images associated with the generation id. <br>\n- generation id and image id: In this case, it will return the status of the image with the specified image id which belongs to the generation. <br> <br>\n",
                "parameters": [
                    {
                        "description": "The id of the generation",
                        "in": "path",
                        "name": "generation_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The id of the image",
                        "in": "path",
                        "name": "image_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GenerationStatusSuccessResponse"
                                }
                            }
                        },
                        "description": "A list of statuses of the images"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestResponse"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedResponse"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        },
                        "description": "Not found"
                    }
                },
                "summary": "Generation Status",
                "tags": [
                    "Generation"
                ]
            }
        },
        "/api/v1/generations/{generation_id}/status": {
            "get": {
                "description": "This section provides users with the ability to quickly check the status of a generation by specifying the following \n- generation id: In this case, it will return the status of all the images associated with the generation id. <br>\n- generation id and image id: In this case, it will return the status of the image with the specified image id which belongs to the generation. <br> <br>\n",
                "parameters": [
                    {
                        "description": "The id of the generation",
                        "in": "path",
                        "name": "generation_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GenerationStatusSuccessResponse"
                                }
                            }
                        },
                        "description": "A list of statuses of the images"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestResponse"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedResponse"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        },
                        "description": "Not found"
                    }
                },
                "summary": "Generation Status",
                "tags": [
                    "Generation"
                ]
            }
        },
        "/api/v1/{resource}": {
            "get": {
                "description": "Explore all available resources that can be used for generating images on Rendernet. With this section, users can easily access key details about the resources at their disposal.\nThe response will return a paginated list of the specified resource along with their names and base model (SD 1.5 or SDXL). \nThis endpoint lets users retrieve a list of available options for the following resources: \n- Models\n- Styles \n- LoRAs\n- ControlNets.\n \n",
                "parameters": [
                    {
                        "description": "The resource to be listed",
                        "in": "path",
                        "name": "resource",
                        "required": true,
                        "schema": {
                            "enum": [
                                "models",
                                "styles",
                                "loras",
                                "controlnets"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "The page number of the resource list",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "The page size of the resource list",
                        "in": "query",
                        "name": "page_size",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResourceSuccessResponse"
                                }
                            }
                        },
                        "description": "Successful response containing the list of resources"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadRequestResponse"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UnauthorizedResponse"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundResponse"
                                }
                            }
                        },
                        "description": "Not found"
                    }
                },
                "summary": "List Resources",
                "tags": [
                    "Resources"
                ]
            }
        }
    },
    "tags": [
        {
            "description": "The Generation section allows users to create, view, and delete images on Rendernet.",
            "name": "Generation"
        },
        {
            "description": "Explore all available resources that can be used for generating images on Rendernet. With this section, users can easily access key details about the resources at their disposal.",
            "name": "Resources"
        },
        {
            "description": "Upload / Get information about assets that can be used for generation.",
            "name": "Assets"
        }
    ]
}